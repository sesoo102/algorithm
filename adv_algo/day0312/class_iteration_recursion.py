def KFC(num):
    # 언제 재귀호출을 중지할까?
    # 재귀호출의 특징1. 항상 종료 조건과 함께 한다.
    if num == 3:
        return

    # 재귀 호출 전 들어가야 할 로직
    print(num)
    KFC(num + 1)        # 다음 재귀 호출 (매개변수를 변경하면서 전달)
    # 돌아오면서 해야 할 로직
    print(num)


KFC(0)
print("끝")

'''
이 코드의 실행 흐름을 **재귀 호출의 원리**를 중심으로 하나씩 자세히 설명해줄게.

---

## 🔹 코드 분석
```python
def KFC(num):
    if num == 3:   # 종료 조건
        return
    
    print(num)  # (1) 현재 num 출력
    KFC(num + 1)  # (2) 다음 재귀 호출
    print(num)  # (3) 돌아오면서 num 출력

KFC(0)
print("끝")
```

위 코드는 `KFC(0)`을 호출하면 내부적으로 `KFC(1)`, `KFC(2)`, `KFC(3)`을 차례로 호출하는 **재귀 호출** 구조야.

---

## 🔹 실행 과정
코드를 실행하면 **스택(Stack) 구조**로 재귀 함수가 호출되면서 진행돼.

### 📌 1. 첫 번째 호출: `KFC(0)`
- `num == 3`이 아니므로 진행
- **(1)** `print(0)` 실행 → `0` 출력
- **(2)** `KFC(1)` 호출 (재귀)

### 📌 2. 두 번째 호출: `KFC(1)`
- `num == 3`이 아니므로 진행
- **(1)** `print(1)` 실행 → `1` 출력
- **(2)** `KFC(2)` 호출 (재귀)

### 📌 3. 세 번째 호출: `KFC(2)`
- `num == 3`이 아니므로 진행
- **(1)** `print(2)` 실행 → `2` 출력
- **(2)** `KFC(3)` 호출 (재귀)

### 📌 4. 네 번째 호출: `KFC(3)`
- `num == 3`이므로 종료 조건을 만나 `return`
- **(2)번 이후의 코드(`print(num)`) 실행되지 않고 바로 돌아감**

---

## 🔹 돌아오는 과정 (재귀 해제)
이제 재귀 호출이 끝났으므로 돌아오면서 **(3)** 부분이 실행돼.

### 📌 5. `KFC(2)`로 돌아옴
- `print(2)` 실행 → `2` 출력

### 📌 6. `KFC(1)`로 돌아옴
- `print(1)` 실행 → `1` 출력

### 📌 7. `KFC(0)`로 돌아옴
- `print(0)` 실행 → `0` 출력

### 📌 8. 모든 함수가 종료되고 `"끝"` 출력
- `print("끝")` 실행 → `"끝"` 출력

---

## 🔹 최종 출력 결과
```
0
1
2
2
1
0
끝
```

### 🔥 **정리**
1. **재귀 호출하면서** `0 → 1 → 2`가 출력됨.
2. `KFC(3)`에서 종료 조건을 만나 **돌아오면서** `2 → 1 → 0`이 출력됨.
3. `"끝"`이 마지막으로 출력됨.

이제 이해됐어? 😊
'''